#lang sicp

;1.3 Formulating Abstractions with Higher-Order Procedures

(define (cube x) (* x x x))

(define (sum-old term a next b)
  (if (> a b) 0)
  (+ (term a) sum term (next a) (next b)))

;1.31 Procedures as Arguments

; sums all integers in range [a,b]
(define (sum-integers-old a b)
  (if (> a b) 0
  (+ a (sum-integers (+ a 1) b))))

; sums the cubes of all integers in range [a,b]
(define (sum-cubes-old a b)
  (if (> a b) 0
      (+ (cube a)
         (sum-cubes (+ a 1) b))))

; sums 1/(x*(x+2)) for range [a,b]
; slowly convreges to pi/8
(define (pi-sum-old a b)
  (if (> a b) 0
      (+ (/ 1.0 (* a (+ a 2)))
         (pi-sum (+ a 4) b))))


; The three previous functions all perform an operation on
; every integer in a range and sum the resulting values.
; This tells us there's a common abstraction: map.
(define (sum-linear term a next b)
  (if (> a b) 0
      (+ (term a)
      (sum term (next a) next b))))
; increments given value by one
; helper function
(define (inc n) (+ n 1))

(define (sum-cubes a b)
  (sum cube a inc b))

; returns the passed value
; helper function, enables a null-operation in maps
(define (identity x) x)

(define (sum-integers a b)
  (sum identity a inc b))

(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))

(define (integral f a b dx)
  (define (add-dx x)
    (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b) dx))


; Excercise 1.29 Simpson's rule of integration
; y = f(a + kh)
; even terms have a coefficient of 2
; odd terms have a coeeficient of 4
; y_a and y_b have a coefficient of 1
(define (simpsons f a b n)
  (define h (/ (- b a) n))
  (define (next-y x) (+ x h h))
  (* (+ (f a)
        (* 2 (sum f a next-y b))
        (* 4 (sum f (+ a h) next-y b))
        (f b))
     (/ h 3)))
                

; Exercise 1.30 iterative sum function
(define (sum term a next b)
  (define (iter a result)
    (if (> a b)
        result
    (iter (next a) (+ result (term a)))))
  (iter a 0))

; Exercise 1.31 product abstraction
(define (product term a next b)
  (define (iter a result)
    (if (> a b)
        result
    (iter (next a) (* (term a) result))))
  (iter a 1))
  
; we can use product to implement factorial
(define (factorial n)
  (product identity 1 inc n))

; pi/4 formula
; wikipedia says this can be rewritten as the product of the series ((2n/(2n-1)) * (2n/(2n+1))

(define (wallis n)
  (define (next n) (+ n 1))
  (define (numer k)
    (if (even? k) (+ k 2) (+ k 1)))
  (define (denom k)
    (if (even? k) (+ k 1) (+ k 2)))
  (define (term i) (/ (numer i) (denom i)))
  (product term 1.0 next n))

; Exercise 1.33 accumulate abstraction
(define (accmulate combiner null-value term a next b)
  (define (iter a result)
    (if (> a b) result
        (iter (next a) (combiner result (term a)))))
  (iter null-value  a))

(define (acc-rec combiner null-value term a next b)
  (if (> a b) null-value
      (combiner (term a) (acc-rec combiner null-value term (next a) next b))))